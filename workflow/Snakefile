import numpy as np


pattern_ground_truth = "ground_truth/benchmark={benchmark}/density={density}/num_latent={num_latent}/num_meas={num_meas}/seed={seed}/"
pattern_dataset = "results/datasets/data_type={data_type}/" + pattern_ground_truth + "n={n}/dataset.csv"


rule all:
    input:
        expand(
            (pattern_dataset),
            benchmark=['random'],
            density=[0.2, 0.3],
            num_latent=[0],
            num_meas=[3,5],
            seed=[0],
            data_type=['gaussian', 'gp'],
            n=[100]
        )
        # "results/sfd_boxplot.png",
        # "results/heatmap.pdf"

rule true_biadj:
    output:
        biadj = "results/" + pattern_ground_truth + "biadj.csv",
    conda:
        "envs/medil.yaml"
    script:
        "scripts/true_biadj.py"


rule true_params:
    input:
        biadj=rules.true_biadj.output,
    output:
        weights="results/" + pattern_ground_truth + "weights.csv",
        errors="results/" + pattern_ground_truth + "errors.csv",
        means="results/" + pattern_ground_truth + "means.csv",
    conda:
        "envs/medil.yaml"
    script:
        "scripts/true_params.py"


rule gaussian_data:
    input:
        weights=rules.true_params.output.weights,
        means=rules.true_params.output.means,
        errors=rules.true_params.output.errors,
    output:
        dataset="results/datasets/data_type=gaussian/" + pattern_ground_truth + "n={n}/dataset.csv",
    conda:
        "envs/medil.yaml"
    script:
        "scripts/generate_data.py"


rule gp_data:
    input:
        weights=rules.true_params.output.weights,
    output:
        dataset="results/datasets/data_type=gp/" + pattern_ground_truth + "n={n}/dataset.csv",
    conda:
        "envs/gp.yaml"
    script:
        "scripts/gp_data.py"


rule fit_ncfa:
    input:
        dataset = pattern_dataset,
        true_biadj = rules.true_biadj.output
    output:
        biadj = "results/est_params/alg=ncfa" + pattern_ground_truth + "/lambda={llambda}_mu={mu}/biadj.csv"
    conda:
        "envs/medil.yaml"
    script:
        "scripts/fit_ncfa.py"

# Rule for cross-validation
rule cross_validate_ncfa:
    input:
        dataset = pattern_dataset,
        biadj = rules.fit_ncfa.output.biadj
    output:
        cv_results = "results/cv/graph={idx}_seed={seed}_n={n}/lambda={llambda}_mu={mu}_cv_results.csv"
    conda:
        "envs/medil.yaml"
    script:
        "scripts/cross_validate_ncfa.py"

# Rule for computing SFD and other losses
rule compute_losses:
    input:
        true_biadj = rules.true_biadj.output,
        est_biadj = rules.fit_ncfa.output.biadj,
        cv_results = rules.cross_validate_ncfa.output.cv_results
    output:
        eval = "results/eval/graph={idx}_seed={seed}_n={n}/lambda={llambda}_mu={mu}_validation.csv"
    conda:
        "envs/medil.yaml"
    script:
        "scripts/compute_loss.py"


#rule fit_and_eval_ncfa:
#    input:
#        dataset=rules.generate_data.output,
#        true_biadj=rules.true_biadj.output,
#    output:
#        biadj="results/est_params/graph={idx}_seed={seed}_n={n}/lambda={llambda}_mu={mu}_biadj.csv",  # change to json file?
#        eval="results/eval/graph={idx}_seed={seed}_n={n}/lambda={llambda}_mu={mu}_validation.csv",
#    conda:
#        "envs/medil.yaml"
#    script:
#        "scripts/fit_ncfa.py"

hyperparam_grid = np.linspace(0.0, 0.2, 3).round(2)

rule eval_csv:
    input:
        expand(
            (rules.compute_losses.output.eval),
            idx=[3],
            seed=[0],
            n=[5000],
            llambda=hyperparam_grid,
            mu=hyperparam_grid,
        ),
    output:
        "results/cross_val.csv",
    conda:
        "envs/plot.yaml"
    script:
        "scripts/join_csv.py"


rule heatmap:
    input:
        rules.eval_csv.output,
    output:
        "results/heatmap.pdf",
    conda:
        "envs/plot.yaml"
    script:
        "scripts/heatmap.py"


# rule create_boxplot:
#     input:
#         sfd_files=expand("results/sfd/sfd_{idx}_{seed}_{n}_{lambda_}_{mu}.csv",
#                          idx=config["graph_indices"],
#                          seed=config["seeds"],
#                          n=config["sample_sizes"],
#                          lambda_=config["lambda_values"],
#                          mu=config["mu_values"])
#     output:
#         "results/sfd_boxplot.png"
#     script:
#         "scripts/boxplot.py"


rule calculate_metrics:
    input:
        true_graph="results/true_udgs/biadj_{idx}.csv",
        est_graph="results/est_params/graph={idx}_seed={seed}_n={n}/lambda={lambda_}_mu={mu}_biadj.csv"
    output:
        "results/sfd/sfd_{idx}_{seed}_{n}_{lambda_}_{mu}.csv"
    script:
        "scripts/calculate_sfd.py"
