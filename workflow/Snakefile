import numpy as np

# hyperparam_grid = np.linspace(0.0, 0.2, 20).round(2)
# hyperparam_grid = np.linspace(0.01, 2.0, 20).round(2)
hyperparam_grid = np.linspace(0.0, 0.2, 2).round(2)

configfile: "envs/config.yaml"

rule all:
    input:
        "results/sfd_boxplot.png",
        "results/heatmap.pdf"

rule true_biadj:
    output:
        biadj="results/true_udgs/biadj_{idx}.csv",
    params:
        sparsity=lambda wildcards: config.get("sparsities", {}).get(wildcards.idx, 0.5),
        n_latent=lambda wildcards: config.get("n_latent", {}).get(wildcards.idx, 3),
        n_observed=lambda wildcards: config.get("n_observed", {}).get(wildcards.idx, 5),
        seed=lambda wildcards: int(wildcards.idx) + 42
    conda:
        "envs/basic_ml.yaml"
    script:
        "scripts/true_biadj.py"


rule true_params:
    input:
        biadj=rules.true_biadj.output,
    output:
        weights="results/true_params/graph={idx}_seed={seed}_weights.csv",  # change to json file with all three
        errors="results/true_params/graph={idx}_seed={seed}_errors.csv",
        means="results/true_params/graph={idx}_seed={seed}_means.csv",
    conda:
        "envs/medil.yaml"
    script:
        "scripts/true_params.py"


rule gp_data:
    input:
        biadj=rules.true_biadj.output,
    output:
        dataset="results/gp_datasets/graph={idx}/seed={seed}/n={n}_dataset.csv",
    conda:
        "envs/gp.yaml"
    script:
        "scripts/gp_data.py"


rule generate_data:
    input:
        weights=rules.true_params.output.weights,  # change to json file with all three
        means=rules.true_params.output.means,
        errors=rules.true_params.output.errors,
    output:
        dataset="results/datasets/graph={idx}/seed={seed}/n={n}_dataset.csv",
    conda:
        "envs/medil.yaml"
    script:
        "scripts/generate_data.py"


rule fit_and_eval_ncfa:
    input:
        dataset=rules.generate_data.output,
        true_biadj=rules.true_biadj.output,
    output:
        biadj="results/est_params/graph={idx}_seed={seed}_n={n}/lambda={llambda}_mu={mu}_biadj.csv",  # change to json file?
        eval="results/eval/graph={idx}_seed={seed}_n={n}/lambda={llambda}_mu={mu}_validation.csv",
    conda:
        "envs/medil.yaml"
    script:
        "scripts/fit_ncfa.py"


rule eval_csv:
    input:
        expand(
            (rules.fit_and_eval_ncfa.output.eval),
            idx=[3],
            seed=[0],
            n=[5000],
            llambda=hyperparam_grid,
            mu=hyperparam_grid,
        ),
    output:
        "results/cross_val.csv",
    conda:
        "envs/plot.yaml"
    script:
        "scripts/join_csv.py"


rule heatmap:
    input:
        rules.eval_csv.output,
    output:
        "results/heatmap.pdf",
    conda:
        "envs/plot.yaml"
    script:
        "scripts/heatmap.py"


rule create_boxplot:
    input:
        sfd_files=expand("results/sfd/sfd_{idx}_{seed}_{n}_{lambda_}_{mu}.csv",
                         idx=config["graph_indices"],
                         seed=config["seeds"],
                         n=config["sample_sizes"],
                         lambda_=config["lambda_values"],
                         mu=config["mu_values"])
    output:
        "results/sfd_boxplot.png"
    script:
        "scripts/boxplot.py"


rule calculate_metrics:
    input:
        true_graph="results/true_udgs/biadj_{idx}.csv",
        est_graph="results/est_params/graph={idx}_seed={seed}_n={n}/lambda={lambda_}_mu={mu}_biadj.csv"
    output:
        "results/sfd/sfd_{idx}_{seed}_{n}_{lambda_}_{mu}.csv"
    script:
        "scripts/calculate_sfd.py"