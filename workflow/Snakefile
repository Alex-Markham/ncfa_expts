import numpy as np


hyperparam_grid = np.linspace(0.0, 0.1, 2).round(2)

pattern_ground_truth = "benchmark={benchmark}/density={density}/num_latent={num_latent}/num_meas={num_meas}/seed={seed}/"
pattern_dataset = "data_type={data_type}/" + pattern_ground_truth + "n={n}/"

rule all:
    input:
        "results/handpicked_boxplot.csv"
        # "results/sfd_boxplot.png",
        # "results/heatmap.pdf"

rule true_biadj:
    output:
        biadj = "results/ground_truth/" + pattern_ground_truth + "biadj.csv",
    conda:
        "envs/medil.yaml"
    script:
        "scripts/true_biadj.py"


rule true_params:
    input:
        biadj=rules.true_biadj.output,
    output:
        weights="results/ground_truth/" + pattern_ground_truth + "weights.csv",
        errors="results/ground_truth/" + pattern_ground_truth + "errors.csv",
        means="results/ground_truth/" + pattern_ground_truth + "means.csv",
    conda:
        "envs/medil.yaml"
    script:
        "scripts/true_params.py"


rule gaussian_data:
    input:
        weights=rules.true_params.output.weights,
        means=rules.true_params.output.means,
        errors=rules.true_params.output.errors,
    output:
        dataset="results/datasets/data_type=gaussian/" + pattern_ground_truth + "n={n}/dataset.csv",
    conda:
        "envs/medil.yaml"
    script:
        "scripts/generate_data.py"


rule gp_data:
    input:
        weights=rules.true_params.output.weights,
    output:
        dataset="results/datasets/data_type=gp/" + pattern_ground_truth + "n={n}/dataset.csv",
    conda:
        "envs/gp.yaml"
    script:
        "scripts/gp_data.py"


rule fit_ncfa:
    input:
        dataset = "results/datasets/" + pattern_dataset + "dataset.csv",
    output:
        pooled_biadj_weights = "results/est_params/alg=ncfa/" + pattern_dataset + "lambda={llambda}_mu={mu}/pooled_biadj_weights.csv"
    conda:
        "envs/medil.yaml"
    script:
        "scripts/fit_ncfa.py"


rule cross_validate_ncfa:
    input:
        dataset = "results/datasets/" + pattern_dataset + "dataset.csv",
    output:
        avg_cv_loss = "results/eval/alg=ncfa/" + pattern_dataset + "lambda={llambda}_mu={mu}/avg_cv_loss.txt"
    conda:
        "envs/medil.yaml"
    script:
        "scripts/cross_validate_ncfa.py"


rule model_selection_ncfa:
    input:
        cv_loss = expand((rules.cross_validate_ncfa.output), llambda=hyperparam_grid, mu=hyperparam_grid, allow_missing=True),
        pooled_biadj_weights = expand((rules.fit_ncfa.output.pooled_biadj_weights), llambda=hyperparam_grid, mu=hyperparam_grid, allow_missing=True)
    output:
        cv_losses = "results/eval/alg=ncfa/" + pattern_dataset + 'cv_losses.csv',
        selected_hyperparams = "results/est_params/alg=ncfa/" + pattern_dataset + 'selected_hyperparams.csv',
        selected_biadj_weights = "results/est_params/alg=ncfa/" + pattern_dataset + 'selected_biadj_weights.csv'
    conda:
        "envs/plot.yaml"
    script:
        "scripts/model_select_ncfa.py"


rule sfd_cross_validated:
    input:
        est_biadj_weights = rules.model_selection_ncfa.output.selected_biadj_weights,
        true_biadj = rules.true_biadj.output.biadj
    output:
        sfd = "results/eval/alg=ncfa/" + pattern_dataset + "sfd.csv"
    conda:
        "envs/medil.yaml"
    script:
        "scripts/sfd_cross_validated.py"


rule handpicked_boxplot_csv:
    input:
        expand((rules.sfd_cross_validated.output),
            benchmark=["0", '3'],
            density=[0],
            num_latent=[0],
            num_meas=[0],
            seed=[0, 1],
            data_type=['gaussian'],
            n=[100],
            llambda=hyperparam_grid,
            mu=hyperparam_grid,
        )
    output:
        "results/handpicked_boxplot.csv",
    conda:
        "envs/plot.yaml"
    script:
        "scripts/join_csv.py"


rule compute_losses:
    input:
        true_biadj = rules.true_biadj.output,
        est_biadj = rules.fit_ncfa.output.pooled_biadj_weights,
    output:
        eval = "results/eval/graph={idx}_seed={seed}_n={n}/lambda={llambda}_mu={mu}_validation.csv"
    conda:
        "envs/medil.yaml"
    script:
        "scripts/compute_loss.py"


rule eval_csv:
    input:
        expand(
            (rules.compute_losses.output.eval),
            idx=[3],
            seed=[0],
            n=[5000],
            llambda=hyperparam_grid,
            mu=hyperparam_grid,
        ),
    output:
        "results/cross_val.csv",
    conda:
        "envs/plot.yaml"
    script:
        "scripts/join_csv.py"


rule heatmap:
    input:
        rules.eval_csv.output,
    output:
        "results/heatmap.pdf",
    conda:
        "envs/plot.yaml"
    script:
        "scripts/heatmap.py"


# rule create_boxplot:
#     input:
#         sfd_files=expand("results/sfd/sfd_{idx}_{seed}_{n}_{lambda_}_{mu}.csv",
#                          idx=config["graph_indices"],
#                          seed=config["seeds"],
#                          n=config["sample_sizes"],
#                          lambda_=config["lambda_values"],
#                          mu=config["mu_values"])
#     output:
#         "results/sfd_boxplot.png"
#     script:
#         "scripts/boxplot.py"


rule calculate_metrics:
    input:
        true_graph="results/true_udgs/biadj_{idx}.csv",
        est_graph="results/est_params/graph={idx}_seed={seed}_n={n}/lambda={lambda_}_mu={mu}_biadj.csv"
    output:
        "results/sfd/sfd_{idx}_{seed}_{n}_{lambda_}_{mu}.csv"
    script:
        "scripts/calculate_sfd.py"
