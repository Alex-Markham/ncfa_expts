import numpy as np


hyperparam_grid = np.linspace(0.0, 0.1, 7).round(2)

pattern_ground_truth = "benchmark={benchmark}/density={density}/num_latent={num_latent}/num_meas={num_meas}/seed={seed}/"
pattern_dataset = f"data_type={{data_type}}/{pattern_ground_truth}n={{n}}/"


rule all:
    input:
        "results/handpicked_boxplot.png",
        "results/random_boxplot.png",
        "results/heatmap.png",
    log:
        "results/logs/all.log",


rule true_biadj:
    output:
        biadj=f"results/ground_truth/{pattern_ground_truth}biadj.csv",
    conda:
        "envs/medil.yaml"
    log:
        f"results/logs/true_biadj/{pattern_ground_truth}rule.log",
    script:
        "scripts/true_biadj.py"


rule true_params:
    input:
        biadj=rules.true_biadj.output,
    output:
        weights=f"results/ground_truth/{pattern_ground_truth}weights.csv",
        errors=f"results/ground_truth/{pattern_ground_truth}errors.csv",
        means=f"results/ground_truth/{pattern_ground_truth}means.csv",
    conda:
        "envs/medil.yaml"
    log:
        f"results/logs/true_params/{pattern_ground_truth}rule.log",
    script:
        "scripts/true_params.py"


rule gaussian_data:
    input:
        weights=rules.true_params.output.weights,
        means=rules.true_params.output.means,
        errors=rules.true_params.output.errors,
    output:
        dataset="results/datasets/data_type=gaussian/"
        f"{pattern_ground_truth}"
        "n={n}/dataset.csv",
    conda:
        "envs/medil.yaml"
    log:
        f"results/logs/gaussian_data/{pattern_ground_truth}n={{n}}/rule.log",
    script:
        "scripts/gaussian_data.py"


rule gp_data:
    input:
        weights=rules.true_params.output.weights,
    output:
        dataset="results/datasets/data_type=gp/"
        f"{pattern_ground_truth}"
        "n={n}/dataset.csv",
    conda:
        "envs/gp.yaml"
    log:
        f"results/logs/gp_data/{pattern_ground_truth}n={{n}}/rule.log",
    script:
        "scripts/gp_data.py"


rule fit_fci:
    input:
        dataset=f"results/datasets/{pattern_dataset}dataset.csv",
        true_biadj=rules.true_biadj.output.biadj,
    output:
        est_biadj=f"results/est_params/alg=fci/{pattern_dataset}biadj.csv",
        sfd=f"results/eval/alg=fci/{pattern_dataset}sfd.csv",
    conda:
        "envs/medil.yaml"
    log:
        f"results/logs/fit_fci/{pattern_dataset}rule.log",
    script:
        "scripts/fit_fci.py"


rule fit_xi1pc:
    input:
        dataset=f"results/datasets/{pattern_dataset}dataset.csv",
        true_biadj=rules.true_biadj.output.biadj,
    output:
        est_biadj=f"results/est_params/alg=xi1pc/{pattern_dataset}biadj.csv",
        sfd=f"results/eval/alg=xi1pc/{pattern_dataset}sfd.csv",
        shd=f"results/eval/alg=xi1pc/{pattern_dataset}shd.csv",
    conda:
        "envs/medil.yaml"
    log:
        f"results/logs/fit_xi1pc/{pattern_dataset}rule.log",
    script:
        "scripts/fit_xi1pc.py"


rule fit_ncfa:
    input:
        dataset=f"results/datasets/{pattern_dataset}dataset.csv",
    output:
        pooled_biadj_weights="results/est_params/alg=ncfa/"
        f"{pattern_dataset}"
        "lambda={llambda}_mu={mu}/pooled_biadj_weights.csv",
        vae="results/est_params/alg=ncfa/"
        f"{pattern_dataset}"
        "lambda={llambda}_mu={mu}/vae.pt",
        losses="results/est_params/alg=ncfa/"
        f"{pattern_dataset}"
        "lambda={llambda}_mu={mu}/losses.csv",
    conda:
        "envs/medil.yaml"
    log:
        f"results/logs/fit_ncfa/{pattern_dataset}lambda={{llambda}}_mu={{mu}}/rule.log",
    script:
        "scripts/fit_ncfa.py"


rule cross_validate_ncfa:
    input:
        dataset=f"results/datasets/{pattern_dataset}dataset.csv",
    output:
        avg_cv_loss="results/eval/alg=ncfa/"
        f"{pattern_dataset}"
        "lambda={llambda}_mu={mu}/avg_cv_loss.csv",
    conda:
        "envs/medil.yaml"
    log:
        f"results/logs/cross_validate_ncfa/{pattern_dataset}"
        "lambda={llambda}_mu={mu}/rule.log",
    script:
        "scripts/cross_validate_ncfa.py"


rule model_selection_ncfa:
    input:
        cv_loss=expand(
            (rules.cross_validate_ncfa.output),
            llambda=hyperparam_grid,
            mu=hyperparam_grid,
            allow_missing=True,
        ),
        pooled_biadj_weights=expand(
            (rules.fit_ncfa.output.pooled_biadj_weights),
            llambda=hyperparam_grid,
            mu=hyperparam_grid,
            allow_missing=True,
        ),
    output:
        cv_losses=f"results/eval/alg=ncfa/{pattern_dataset}cv_losses.csv",
        selected_hyperparams="results/est_params/alg=ncfa/"
        f"{pattern_dataset}"
        "selected_hyperparams.csv",
        selected_biadj_weights="results/est_params/alg=ncfa/"
        f"{pattern_dataset}"
        "selected_biadj_weights.csv",
    conda:
        "envs/plot.yaml"
    log:
        f"results/logs/model_selection_ncfa/{pattern_dataset}rule.log",
    script:
        "scripts/model_select_ncfa.py"


rule sfd_cross_validated:
    input:
        est_biadj_weights=rules.model_selection_ncfa.output.selected_biadj_weights,
        true_biadj=rules.true_biadj.output.biadj,
    output:
        sfd=f"results/eval/alg=ncfa/{pattern_dataset}sfd.csv",
        shd=f"results/eval/alg=ncfa/{pattern_dataset}shd.csv",
    conda:
        "envs/medil.yaml"
    log:
        f"results/logs/sfd_cross_validated/{pattern_dataset}rule.log",
    script:
        "scripts/sfd_cross_validated.py"


rule handpicked_boxplot_csv:
    input:
        ncfa=expand(
            (rules.sfd_cross_validated.output.sfd),
            benchmark=[str(idx) for idx in range(7)],
            density=[0],
            num_latent=[0],
            num_meas=[0],
            seed=[idx for idx in range(10)],
            data_type=["gaussian"],
            n=[10000],
            llambda=hyperparam_grid,
            mu=hyperparam_grid,
        ),
        others=expand(
            (f"results/eval/alg={{alg}}/{pattern_dataset}sfd.csv"),
            alg=["xi1pc"],
            benchmark=[str(idx) for idx in range(7)],
            density=[0],
            num_latent=[0],
            num_meas=[0],
            seed=[idx for idx in range(10)],
            data_type=["gaussian"],
            n=[10000],
        ),
    output:
        "results/handpicked_boxplot.csv",
    conda:
        "envs/plot.yaml"
    log:
        "results/logs/handpicked_boxplot_csv.log",
    script:
        "scripts/join_csv.py"


rule handpicked_boxplot:
    input:
        rules.handpicked_boxplot_csv.output,
    output:
        "results/handpicked_boxplot.png",
    conda:
        "envs/plot.yaml"
    log:
        "results/logs/handpicked_boxplot.log",
    script:
        "scripts/handpicked_boxplot.py"


rule random_boxplot_csv:
    input:
        expand(
            (rules.sfd_cross_validated.output.sfd),
            benchmark=["random"],
            density=[0.1, 0.2, 0.3, 0.5, 0.7, 0.9],
            num_latent=[0],
            num_meas=[10],
            seed=[idx for idx in range(10)],
            data_type=["gaussian"],
            n=[10000],
            llambda=hyperparam_grid,
            mu=hyperparam_grid,
        ),
        others=expand(
            (f"results/eval/alg={{alg}}/{pattern_dataset}sfd.csv"),
            alg=["xi1pc"],
            benchmark=["random"],
            density=[0.1, 0.2, 0.3, 0.5, 0.7, 0.9],
            num_latent=[0],
            num_meas=[10],
            seed=[idx for idx in range(10)],
            data_type=["gaussian"],
            n=[10000],
        ),
    output:
        "results/random_boxplot.csv",
    conda:
        "envs/plot.yaml"
    log:
        "results/logs/random_boxplot_csv.log",
    script:
        "scripts/join_csv.py"


rule random_boxplot:
    input:
        rules.random_boxplot_csv.output,
    output:
        "results/random_boxplot.png",
    conda:
        "envs/plot.yaml"
    log:
        "results/logs/random_boxplot.log",
    script:
        "scripts/random_boxplot.py"


rule eval_grid:
    input:
        true_biadj=rules.true_biadj.output,
        est_biadj_weights=rules.fit_ncfa.output.pooled_biadj_weights,
        losses=rules.fit_ncfa.output.losses,
        cv_loss=rules.cross_validate_ncfa.output.avg_cv_loss,
    output:
        eval="results/est_params/alg=ncfa/"
        f"{pattern_dataset}"
        "lambda={llambda}_mu={mu}/eval.csv",
    conda:
        "envs/medil.yaml"
    log:
        f"results/logs/eval_grid/{pattern_dataset}lambda={{llambda}}_mu={{mu}}/rule.log",
    script:
        "scripts/eval_grid.py"


rule heatmap_csv:
    input:
        expand(
            (rules.eval_grid.output.eval),
            benchmark=[str(idx) for idx in range(7)],
            density=[0],
            num_latent=[0],
            num_meas=[0],
            seed=[0],
            data_type=["gaussian"],
            n=[10000],
            llambda=hyperparam_grid,
            mu=hyperparam_grid,
        ),
    output:
        "results/heatmap.csv",
    conda:
        "envs/plot.yaml"
    log:
        "results/logs/heatmap_csv.log",
    script:
        "scripts/join_csv.py"


rule heatmap:
    input:
        rules.heatmap_csv.output,
    output:
        "results/heatmap.png",
    conda:
        "envs/plot.yaml"
    log:
        "results/logs/heatmap.log",
    script:
        "scripts/heatmap.py"
